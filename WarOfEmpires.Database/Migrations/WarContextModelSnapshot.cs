// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarOfEmpires.Database;

namespace WarOfEmpires.Database.Migrations
{
    [DbContext(typeof(WarContext))]
    partial class WarContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AllianceNonAggressionPact", b =>
                {
                    b.Property<int>("AlliancesId")
                        .HasColumnType("int");

                    b.Property<int>("NonAggressionPactsId")
                        .HasColumnType("int");

                    b.HasKey("AlliancesId", "NonAggressionPactsId");

                    b.HasIndex("NonAggressionPactsId");

                    b.ToTable("AllianceNonAggressionPact");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.AttackResultEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttackResults", "Attacks");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.AttackTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttackTypes", "Attacks");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.BuildingTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BuildingTypes", "Empires");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.MerchandiseTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MerchandiseTypes", "Markets");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.SiegeWeaponTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SiegeWeaponTypes", "Siege");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.TaskExecutionModeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskExecutionModes", "Events");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.TroopTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TroopTypes", "Attacks");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.UserEventTypeEntity", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserEventTypes", "Security");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.UserStatusEntity", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserStatus", "Security");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.WorkerTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkerTypes", "Empires");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Alliances.Alliance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.ToTable("Alliances", "Alliances");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Alliances.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllianceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllianceId");

                    b.HasIndex("PlayerId");

                    b.ToTable("ChatMessages", "Alliances");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Alliances.Invite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllianceId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AllianceId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Invites", "Alliances");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Alliances.NonAggressionPact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("NonAggressionPacts", "Alliances");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Alliances.NonAggressionPactRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("NonAggressionPactRequests", "Alliances");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Alliances.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllianceId")
                        .HasColumnType("int");

                    b.Property<bool>("CanDeleteChatMessages")
                        .HasColumnType("bit");

                    b.Property<bool>("CanInvite")
                        .HasColumnType("bit");

                    b.Property<bool>("CanKickMembers")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageNonAggressionPacts")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageRoles")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AllianceId");

                    b.ToTable("Roles", "Alliances");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Attacks.Attack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttackType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttackerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DefenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int>("Turns")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttackerId");

                    b.HasIndex("DefenderId");

                    b.HasIndex("Result");

                    b.HasIndex("Type");

                    b.ToTable("Attacks", "Attacks");

                    b.HasDiscriminator<string>("AttackType").HasValue("Attack");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Attacks.AttackRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttackId")
                        .HasColumnType("int");

                    b.Property<long>("Damage")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAggressor")
                        .HasColumnType("bit");

                    b.Property<int>("TroopType")
                        .HasColumnType("int");

                    b.Property<int>("Troops")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttackId");

                    b.HasIndex("TroopType");

                    b.ToTable("AttackRounds", "Attacks");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Attacks.Casualties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttackRoundId")
                        .HasColumnType("int");

                    b.Property<int>("Mercenaries")
                        .HasColumnType("int");

                    b.Property<int>("Soldiers")
                        .HasColumnType("int");

                    b.Property<int>("TroopType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttackRoundId");

                    b.ToTable("Casualties", "Attacks");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Attacks.Troops", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Mercenaries")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Soldiers")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("Type");

                    b.ToTable("Troops", "Attacks");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Auditing.CommandExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommandData")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CommandType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("ElapsedMilliseconds")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CommandExecutions", "Auditing");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Auditing.QueryExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("ElapsedMilliseconds")
                        .HasColumnType("float");

                    b.Property<string>("QueryData")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("QueryType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("QueryExecutions", "Auditing");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Empires.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("Type");

                    b.ToTable("Buildings", "Empires");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Empires.Workers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("Type");

                    b.ToTable("Workers", "Empires");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Events.ScheduledTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExecutionMode")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("time");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastExecutionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionMode");

                    b.ToTable("ScheduledTasks", "Events");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Markets.Caravan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Caravans", "Markets");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Markets.Merchandise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaravanId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaravanId");

                    b.HasIndex("Type");

                    b.ToTable("Merchandise", "Markets");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Markets.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId1")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerId1");

                    b.HasIndex("Type");

                    b.ToTable("Transactions", "Markets");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Players.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages", "Players");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Players.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AllianceId")
                        .HasColumnType("int");

                    b.Property<int?>("AllianceRoleId")
                        .HasColumnType("int");

                    b.Property<int>("AttackTurns")
                        .HasColumnType("int");

                    b.Property<int>("BankTurns")
                        .HasColumnType("int");

                    b.Property<int>("CurrentRecruitingEffort")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("HasNewMarketSales")
                        .HasColumnType("bit");

                    b.Property<bool>("HasUpkeepRunOut")
                        .HasColumnType("bit");

                    b.Property<int>("Peasants")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<int>("Tax")
                        .HasColumnType("int");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllianceId");

                    b.HasIndex("AllianceRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Players", "Players");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivationCode")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastOnline")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("NewEmailConfirmationCode")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("UserStatus_Id");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Users", "Security");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Security.UserEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasColumnName("UserEventType_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.ToTable("UserEvents", "Security");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Siege.SiegeWeapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("Type");

                    b.ToTable("SiegeWeapons", "Siege");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Attacks.Assault", b =>
                {
                    b.HasBaseType("WarOfEmpires.Domain.Attacks.Attack");

                    b.HasDiscriminator().HasValue("Assault");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Attacks.Raid", b =>
                {
                    b.HasBaseType("WarOfEmpires.Domain.Attacks.Attack");

                    b.HasDiscriminator().HasValue("Raid");
                });

            modelBuilder.Entity("AllianceNonAggressionPact", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Alliances.Alliance", null)
                        .WithMany()
                        .HasForeignKey("AlliancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Domain.Alliances.NonAggressionPact", null)
                        .WithMany()
                        .HasForeignKey("NonAggressionPactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Alliances.Alliance", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Players.Player", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Alliances.ChatMessage", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Alliances.Alliance", null)
                        .WithMany("ChatMessages")
                        .HasForeignKey("AllianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Domain.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Alliances.Invite", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Alliances.Alliance", "Alliance")
                        .WithMany("Invites")
                        .HasForeignKey("AllianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Domain.Players.Player", "Player")
                        .WithMany("Invites")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Alliance");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Alliances.NonAggressionPactRequest", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Alliances.Alliance", "Recipient")
                        .WithMany("ReceivedNonAggressionPactRequests")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Domain.Alliances.Alliance", "Sender")
                        .WithMany("SentNonAggressionPactRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Alliances.Role", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Alliances.Alliance", "Alliance")
                        .WithMany("Roles")
                        .HasForeignKey("AllianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alliance");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Attacks.Attack", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Players.Player", "Attacker")
                        .WithMany("ExecutedAttacks")
                        .HasForeignKey("AttackerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Domain.Players.Player", "Defender")
                        .WithMany("ReceivedAttacks")
                        .HasForeignKey("DefenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Database.ReferenceEntities.AttackResultEntity", null)
                        .WithMany("Attacks")
                        .HasForeignKey("Result")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Database.ReferenceEntities.AttackTypeEntity", null)
                        .WithMany("Attacks")
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WarOfEmpires.Domain.Common.Resources", "Resources", b1 =>
                        {
                            b1.Property<int>("AttackId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<long>("Food")
                                .HasColumnType("bigint")
                                .HasColumnName("Food");

                            b1.Property<long>("Gold")
                                .HasColumnType("bigint")
                                .HasColumnName("Gold");

                            b1.Property<long>("Ore")
                                .HasColumnType("bigint")
                                .HasColumnName("Ore");

                            b1.Property<long>("Stone")
                                .HasColumnType("bigint")
                                .HasColumnName("Stone");

                            b1.Property<long>("Wood")
                                .HasColumnType("bigint")
                                .HasColumnName("Wood");

                            b1.HasKey("AttackId");

                            b1.ToTable("Attacks");

                            b1.WithOwner()
                                .HasForeignKey("AttackId");
                        });

                    b.Navigation("Attacker");

                    b.Navigation("Defender");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Attacks.AttackRound", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Attacks.Attack", null)
                        .WithMany("Rounds")
                        .HasForeignKey("AttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Database.ReferenceEntities.TroopTypeEntity", null)
                        .WithMany("AttackRounds")
                        .HasForeignKey("TroopType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Attacks.Casualties", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Attacks.AttackRound", null)
                        .WithMany("Casualties")
                        .HasForeignKey("AttackRoundId");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Attacks.Troops", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Players.Player", null)
                        .WithMany("Troops")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Database.ReferenceEntities.TroopTypeEntity", null)
                        .WithMany("Troops")
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Empires.Building", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Players.Player", null)
                        .WithMany("Buildings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Database.ReferenceEntities.BuildingTypeEntity", null)
                        .WithMany("Buildings")
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Empires.Workers", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Players.Player", null)
                        .WithMany("Workers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Database.ReferenceEntities.WorkerTypeEntity", null)
                        .WithMany("Workers")
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Events.ScheduledTask", b =>
                {
                    b.HasOne("WarOfEmpires.Database.ReferenceEntities.TaskExecutionModeEntity", null)
                        .WithMany("ScheduledTasks")
                        .HasForeignKey("ExecutionMode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Markets.Caravan", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Players.Player", "Player")
                        .WithMany("Caravans")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Markets.Merchandise", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Markets.Caravan", null)
                        .WithMany("Merchandise")
                        .HasForeignKey("CaravanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Database.ReferenceEntities.MerchandiseTypeEntity", null)
                        .WithMany("Merchandise")
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Markets.Transaction", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Players.Player", null)
                        .WithMany("BuyTransactions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Domain.Players.Player", null)
                        .WithMany("SellTransactions")
                        .HasForeignKey("PlayerId1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Database.ReferenceEntities.MerchandiseTypeEntity", null)
                        .WithMany("Transactions")
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Players.Message", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Players.Player", "Recipient")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Domain.Players.Player", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Players.Player", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Alliances.Alliance", "Alliance")
                        .WithMany("Members")
                        .HasForeignKey("AllianceId");

                    b.HasOne("WarOfEmpires.Domain.Alliances.Role", "AllianceRole")
                        .WithMany("Players")
                        .HasForeignKey("AllianceRoleId");

                    b.HasOne("WarOfEmpires.Domain.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.OwnsOne("WarOfEmpires.Domain.Common.Resources", "BankedResources", b1 =>
                        {
                            b1.Property<int>("PlayerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<long>("Food")
                                .HasColumnType("bigint")
                                .HasColumnName("BankedFood");

                            b1.Property<long>("Gold")
                                .HasColumnType("bigint")
                                .HasColumnName("BankedGold");

                            b1.Property<long>("Ore")
                                .HasColumnType("bigint")
                                .HasColumnName("BankedOre");

                            b1.Property<long>("Stone")
                                .HasColumnType("bigint")
                                .HasColumnName("BankedStone");

                            b1.Property<long>("Wood")
                                .HasColumnType("bigint")
                                .HasColumnName("BankedWood");

                            b1.HasKey("PlayerId");

                            b1.ToTable("Players");

                            b1.WithOwner()
                                .HasForeignKey("PlayerId");
                        });

                    b.OwnsOne("WarOfEmpires.Domain.Common.Resources", "Resources", b1 =>
                        {
                            b1.Property<int>("PlayerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<long>("Food")
                                .HasColumnType("bigint")
                                .HasColumnName("Food");

                            b1.Property<long>("Gold")
                                .HasColumnType("bigint")
                                .HasColumnName("Gold");

                            b1.Property<long>("Ore")
                                .HasColumnType("bigint")
                                .HasColumnName("Ore");

                            b1.Property<long>("Stone")
                                .HasColumnType("bigint")
                                .HasColumnName("Stone");

                            b1.Property<long>("Wood")
                                .HasColumnType("bigint")
                                .HasColumnName("Wood");

                            b1.HasKey("PlayerId");

                            b1.ToTable("Players");

                            b1.WithOwner()
                                .HasForeignKey("PlayerId");
                        });

                    b.Navigation("Alliance");

                    b.Navigation("AllianceRole");

                    b.Navigation("BankedResources");

                    b.Navigation("Resources");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Security.User", b =>
                {
                    b.HasOne("WarOfEmpires.Database.ReferenceEntities.UserStatusEntity", null)
                        .WithMany("Users")
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WarOfEmpires.Domain.Security.Password", "Password", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varbinary(20)");

                            b1.Property<int?>("HashIterations")
                                .IsRequired()
                                .HasColumnType("int");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varbinary(20)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("WarOfEmpires.Domain.Security.TemporaryPassword", "PasswordResetToken", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime?>("ExpiryDate")
                                .HasColumnType("datetime2");

                            b1.Property<byte[]>("Hash")
                                .HasMaxLength(20)
                                .HasColumnType("varbinary(20)");

                            b1.Property<int?>("HashIterations")
                                .HasColumnType("int");

                            b1.Property<byte[]>("Salt")
                                .HasMaxLength(20)
                                .HasColumnType("varbinary(20)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Password");

                    b.Navigation("PasswordResetToken");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Security.UserEvent", b =>
                {
                    b.HasOne("WarOfEmpires.Database.ReferenceEntities.UserEventTypeEntity", null)
                        .WithMany("UserEvents")
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Domain.Security.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Siege.SiegeWeapon", b =>
                {
                    b.HasOne("WarOfEmpires.Domain.Players.Player", null)
                        .WithMany("SiegeWeapons")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarOfEmpires.Database.ReferenceEntities.SiegeWeaponTypeEntity", null)
                        .WithMany("SiegeWeapons")
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.AttackResultEntity", b =>
                {
                    b.Navigation("Attacks");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.AttackTypeEntity", b =>
                {
                    b.Navigation("Attacks");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.BuildingTypeEntity", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.MerchandiseTypeEntity", b =>
                {
                    b.Navigation("Merchandise");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.SiegeWeaponTypeEntity", b =>
                {
                    b.Navigation("SiegeWeapons");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.TaskExecutionModeEntity", b =>
                {
                    b.Navigation("ScheduledTasks");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.TroopTypeEntity", b =>
                {
                    b.Navigation("AttackRounds");

                    b.Navigation("Troops");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.UserEventTypeEntity", b =>
                {
                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.UserStatusEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WarOfEmpires.Database.ReferenceEntities.WorkerTypeEntity", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Alliances.Alliance", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Invites");

                    b.Navigation("Members");

                    b.Navigation("ReceivedNonAggressionPactRequests");

                    b.Navigation("Roles");

                    b.Navigation("SentNonAggressionPactRequests");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Alliances.Role", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Attacks.Attack", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Attacks.AttackRound", b =>
                {
                    b.Navigation("Casualties");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Markets.Caravan", b =>
                {
                    b.Navigation("Merchandise");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Players.Player", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("BuyTransactions");

                    b.Navigation("Caravans");

                    b.Navigation("ExecutedAttacks");

                    b.Navigation("Invites");

                    b.Navigation("ReceivedAttacks");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SellTransactions");

                    b.Navigation("SentMessages");

                    b.Navigation("SiegeWeapons");

                    b.Navigation("Troops");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("WarOfEmpires.Domain.Security.User", b =>
                {
                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
