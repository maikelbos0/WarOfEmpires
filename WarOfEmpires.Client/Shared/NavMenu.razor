@implements IDisposable

<nav>
    <div class="nav-brand">
        <NavLink href="" Match="NavLinkMatch.All">War of Empires</NavLink>
    </div>

    @if (accessControlState.IsAuthenticated) {
        <NavMenuDropdown Title="@(accessControlState.DisplayName ?? "Account")">
            @*TODO show/hide these two based on IsPlayer*@
            <div class="nav-link">
                <NavLink href="edit-profile">Edit profile</NavLink>
            </div>

            <div class="nav-link">
                <NavLink href="create-player">Create player</NavLink>
            </div>

            <div class="nav-link">
                <NavLink href="change-email">Change email address</NavLink>
            </div>

            <div class="nav-link">
                <NavLink href="change-email">Change email address</NavLink>
            </div>

            <div class="nav-divider"></div>

            @*TODO show/hide these two based on IsAdmin*@
            <div class="nav-link">
                <NavLink href="admin-tools">Administration tools</NavLink>
            </div>

            <div class="nav-link">
                <NavLink href="admin-users">Users</NavLink>
            </div>

            <div class="nav-divider"></div>

            <div class="nav-link">
                <NavLink href="deactivate">Deactivate account</NavLink>
            </div>

            @*TODO make log out a function here*@
            <div class="nav-link">
                <NavLink href="log-out">Log out</NavLink>
            </div>
        </NavMenuDropdown>
    }
    else {
        <div class="nav-link">
            <NavLink href="log-in">Log in</NavLink>
        </div>

        <div class="nav-link">
            <NavLink href="register">Register</NavLink>
        </div>

        <NavMenuDropdown Title="Options">
            <div class="nav-link">
                <NavLink href="send-activation">Send activation</NavLink>
            </div>

            <div class="nav-link">
                <NavLink href="forgot-password">Forgot password</NavLink>
            </div>
        </NavMenuDropdown>
    }
</nav>

@code {

    [Inject]
    public AccessControlProvider AccessControlProvider { get; set; } = null!;

    // TODO retrieve initial state oninit
    private AccessControlState accessControlState = new AccessControlState();

    protected override void OnInitialized() {
        base.OnInitialized();

        AccessControlProvider.AccessControlStateChanged += HandlerAccessControlStateChanged;
    }

    private void HandlerAccessControlStateChanged(AccessControlState state) {
        accessControlState = state;
        StateHasChanged();
    }


    public void Dispose() {
        AccessControlProvider.AccessControlStateChanged -= HandlerAccessControlStateChanged;
    }
}