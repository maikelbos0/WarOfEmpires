@page "/register"
@using WarOfEmpires.Models.Security
@inject HttpClient HttpClient
@inject RoutingService RoutingService
@inject NavigationManager NavigationManager

<Title>Register</Title>

<EditForm Model="model" OnValidSubmit="Submit">
    @*
    TODO custom validation summary for model only
    https://github.com/dotnet/aspnetcore/blob/main/src/Components/Web/src/Forms/ValidationSummary.cs
    *@

    <div class="form-group">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-field">
            <Label For="() => model.Email" />
            <InputText @bind-Value="model.Email" />
            <ValidationMessage For="() => model.Email" />
        </div>

        <div class="form-field">
            <Label For="() => model.Password" />
            <InputText type="password" @bind-Value="model.Password" />
            @*TODO password judger*@
            <ValidationMessage For="() => model.Password" />
        </div>

        <div class="form-field">
            <Label For="() => model.ConfirmPassword" />
            <InputText type="password" @bind-Value="model.ConfirmPassword" />
            <ValidationMessage For="() => model.ConfirmPassword" />
        </div>
    </div>

    <div class="form-button-group">
        <button type="submit">Submit</button>
    </div>
</EditForm>

@code {
    private RegisterUserModel model = new();

    private async Task Submit(EditContext context) {
        var response = await HttpClient.PostAsJsonAsync(RoutingService.GetRoute(Security.Register), model);

        // TODO handle success response
        // TODO centralize
        // TODO handle bad request response
        // TODO better routing
    }
}