@using System.Net;
@page "/register"
@using WarOfEmpires.Models.Security

<Title>Register</Title>

<EditForm EditContext="context" OnValidSubmit="Submit">
    <DataAnnotationsValidator />

    <div class="form-group">
        @{
            var validationMessages = context.GetValidationMessages(context.Field(string.Empty)).ToList();

            if (validationMessages.Any()) {
                <ul class="validation-errors">
                    @foreach (var message in validationMessages) {
                        <li>@message</li>
                    }
                </ul>
            }
        }

        <div class="form-field">
            <Label For="() => model.Email" />
            <InputText @bind-Value="model.Email" />
            <ValidationMessage For="() => model.Email" />
        </div>

        <div class="form-field">
            <Label For="() => model.Password" />
            <InputText type="password" @bind-Value="model.Password" />
            @*TODO password judger*@
            <ValidationMessage For="() => model.Password" />
        </div>

        <div class="form-field">
            <Label For="() => model.ConfirmPassword" />
            <InputText type="password" @bind-Value="model.ConfirmPassword" />
            <ValidationMessage For="() => model.ConfirmPassword" />
        </div>
    </div>

    <div class="form-button-group">
        <button type="submit">Submit</button>
    </div>
</EditForm>

@code {
    [Inject] public HttpClient HttpClient { get; set; } = null!;
    [Inject] public RoutingService RoutingService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [CascadingParameter] public NotificationManager NotificationManager { get; set; } = null!;

    private RegisterUserModel model;
    private EditContext context;

    public Register() {
        model = new();
        context = new(model);
    }

    private async Task Submit(EditContext context) {
        var response = await HttpClient.PostAsJsonAsync(RoutingService.GetRoute(Security.Register), model);

        if (response.IsSuccessStatusCode) {
            var warnings = await response.Content.ReadFromJsonAsync<IEnumerable<string>>();

            if (warnings?.Any() ?? false) {
                foreach (var warning in warnings) {
                    NotificationManager.Notify(NotificationType.Warning, warning);
                }
            }
            else {
                NotificationManager.Notify(NotificationType.Success, "You have registered successfully. An email has been sent to the provided email address with a validation link.");
            }

            NavigationManager.NavigateTo("/");
        }
        else if (response.StatusCode == HttpStatusCode.BadRequest) {
            // TODO use ValidationProblemDetails class instead?
            var errorDetails = await response.Content.ReadFromJsonAsync<IDictionary<string, IEnumerable<string>>>() ?? throw new InvalidOperationException("Missing error details in request content");
            var messageStore = new ValidationMessageStore(context);

            foreach (var errorField in errorDetails) {
                messageStore.Add(context.Field(errorField.Key), errorField.Value);
            }

            context.OnValidationRequested += (s, e) => messageStore.Clear();
            context.OnFieldChanged += (s, e) => messageStore.Clear(e.FieldIdentifier);
            context.NotifyValidationStateChanged();
        }
        else {
            NotificationManager.Notify(NotificationType.Error, "An error occurred processing data; please try again.");
        }

        // TODO centralize
    }
}