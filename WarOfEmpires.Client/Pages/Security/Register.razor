@page "/register"
@using WarOfEmpires.Models.Security

<Title>Register</Title>

<EditForm Model="model" OnValidSubmit="Submit">
    @*
    TODO custom validation summary for model only
    https://github.com/dotnet/aspnetcore/blob/main/src/Components/Web/src/Forms/ValidationSummary.cs
    *@

    <div class="form-group">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-field">
            <Label For="() => model.Email" />
            <InputText @bind-Value="model.Email" />
            <ValidationMessage For="() => model.Email" />
        </div>

        <div class="form-field">
            <Label For="() => model.Password" />
            <InputText type="password" @bind-Value="model.Password" />
            @*TODO password judger*@
            <ValidationMessage For="() => model.Password" />
        </div>

        <div class="form-field">
            <Label For="() => model.ConfirmPassword" />
            <InputText type="password" @bind-Value="model.ConfirmPassword" />
            <ValidationMessage For="() => model.ConfirmPassword" />
        </div>
    </div>

    <div class="form-button-group">
        <button type="submit">Submit</button>
    </div>
</EditForm>

@code {
    [Inject] public HttpClient HttpClient { get; set; } = null!;
    [Inject] public RoutingService RoutingService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [CascadingParameter] public NotificationManager NotificationManager { get; set; } = null!;

    private RegisterUserModel model = new();

    private async Task Submit(EditContext context) {
        var response = await HttpClient.PostAsJsonAsync(RoutingService.GetRoute(Security.Register), model);

        if (response.IsSuccessStatusCode) {
            NotificationManager.Notify(NotificationType.Success, "You have registered successfully. An email has been sent to the provided email address with a validation link.", true);
            // TODO Display warning messages
            NavigationManager.NavigateTo("/");
        }
        else {
            /*
            var messageStore = new ValidationMessageStore(context);
            messageStore.Add(context.Field("Password"), "Test");
            context.OnValidationRequested += (s, e) => messageStore.Clear();
            context.OnFieldChanged += (s, e) => messageStore.Clear(e.FieldIdentifier);
            context.NotifyValidationStateChanged();
            */
        }

        // TODO centralize
        // TODO handle bad request response
        // TODO better routing
    }
}