@model WarOfEmpires.Models.Alliances.AllianceHomeViewModel
@inject AuthorizationService AuthorizationService

@{
    var canKickMembers = AuthorizationService.IsAuthorized(new AllianceAuthorizationRequest() { CanKickMembers = true });
    var canDeleteChatMessages = AuthorizationService.IsAuthorized(new AllianceAuthorizationRequest() { CanDeleteChatMessages = true });

    ViewBag.Title = $"{Model.Name} - Alliance home";
}

<h2>@Model.Name - Alliance home</h2>

<div class="row">
    <div class="col-12 col-lg-6">
        <div class="mb-3">
            <label>Code</label>
            <div class="form-control" readonly="readonly">@Model.Code</div>
        </div>

        <div class="mb-3">
            <label>Name</label>
            <div class="form-control" readonly="readonly">@Model.Name</div>
        </div>

        <div class="mb-3">
            <label>Leader</label>
            @if (Model.LeaderId == null) {
                <div class="form-control" readonly="readonly">@Model.Leader</div>
            }
            else {
                @Html.ActionLink(Model.Leader, "Details", "Player", new { id = Model.LeaderId }, new { @class = "w-100 btn btn-secondary text-start" })
            }
        </div>
    </div>

    <div class="col-12 col-lg-6">
        <table class="table table-borderless table-striped">
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>Display name</th>
                    <th>Role</th>
                    <th>Last online</th>

                    @if (canKickMembers) {
                        <th></th>
                    }
                </tr>
            </thead>

            <tbody>
                @foreach (var member in Model.Members) {
                    <tr>
                        <td class="@(member.LastOnline > DateTime.UtcNow.AddMinutes(-30) ? "bg-highlight" : "")">
                            @Html.ActionLink(member.Rank.ToString(StringFormat.Integer), "Details", "Player", new { id = member.Id }, null)
                        </td>
                        <td class="@(member.LastOnline > DateTime.UtcNow.AddMinutes(-30) ? "bg-highlight" : "")">
                            @Html.ActionLink(member.DisplayName, "Details", "Player", new { id = member.Id }, null)
                        </td>
                        <td class="@(member.LastOnline > DateTime.UtcNow.AddMinutes(-30) ? "bg-highlight" : "")">
                            @Html.ActionLink(member.Role ?? "Member", "Details", "Player", new { id = member.Id }, null)
                        </td>
                        <td class="@(member.LastOnline > DateTime.UtcNow.AddMinutes(-30) ? "bg-highlight" : "")">
                            @if (member.LastOnline.HasValue) {
                                @Html.ActionLink(member.LastOnline.Value.ToString(StringFormat.Date), "Details", "Player", new { id = member.Id }, null)
                            }
                        </td>

                        @if (canKickMembers) {
                            <td class="@(member.LastOnline > DateTime.UtcNow.AddMinutes(-30) ? "bg-highlight" : "")">
                                @if (member.Id != Model.LeaderId) {
                                    using (Html.BeginForm("KickFromAlliance", null, FormMethod.Post, new { data_success_message = "The player has been kicked out." })) {
                                        @Html.Hidden("id", member.Id)

                                        <button type="submit" class="btn btn-secondary py-0">X</button>
                                    }
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<h3 class="mt-3">Chat</h3>

<div class="row">
    <div class="col-12 col-lg-6 mb-3 mg-lg-0">
        @using (Html.BeginForm("PostChatMessage", null, FormMethod.Post, new { data_success_message = "Your message has been posted." })) {
            <div class="mb-3">
                @Html.LabelFor(m => m.ChatMessage, new { @class = "site-required" })
                @Html.TextAreaFor(m => m.ChatMessage, new { @class = "form-control", rows = 8 })
                @Html.ValidationMessageFor(m => m.ChatMessage, null, new { @class = "small form-text text-danger" })
            </div>

            <div class="row">
                <div class="col-12 col-md-6 offset-md-6"><button type="submit" class="btn btn-primary w-100">Post</button></div>
            </div>
        }
    </div>

    <div class="col-12 col-lg-6">
        @foreach (var chatMessage in Model.ChatMessages) {
            <div class="mb-3">
                <label>
                    @if (chatMessage.PlayerId == null) {
                        @chatMessage.Player
                    }
                    else {
                        @Html.ActionLink(chatMessage.Player, "Details", "Player", new { id = chatMessage.PlayerId }, null)
                    }

                    posted on @chatMessage.Date.ToString(StringFormat.Date)
                </label>

                @if (canDeleteChatMessages) {
                    using (Html.BeginForm("DeleteChatMessage", null, FormMethod.Post, new { data_success_message = "The message has been deleted." })) {
                        @Html.Hidden("id", chatMessage.Id)

                        <div class="site-user-text"><button type="submit" class="btn float-end p-0">X</button>@chatMessage.Message</div>
                    }
                }
                else {
                    <div class="site-user-text">@chatMessage.Message</div>
                }
            </div>
        }
    </div>
</div>
