@model WarOfEmpires.Models.Empires.WorkersModel

@{
    ViewBag.Title = "Workers";

    var iconTypes = new Dictionary<string, IconType> {
        { "Farmers", IconType.Food },
        { "WoodWorkers", IconType.Wood },
        { "StoneMasons", IconType.Stone },
        { "OreMiners", IconType.Ore },
        { "SiegeEngineers", IconType.Siege },
        { "Merchants", IconType.Market },
        { "Scientists", IconType.University }
    };
}

<h2>Workers</h2>

<p>
    Here you can train or untrain your workers to make sure you produce the resources you require.
</p>

<ul class="text-muted">
    <li>Peasants available for training: @Model.CurrentPeasants.ToString(StringFormat.Integer)</li>
    <li>Worker training cost: <vc:resources model="Model.WorkerCost" /></li>
    <li>Gold production per turn: @Model.CurrentGoldPerTurn.ToString(StringFormat.Integer) <icon type="Gold" /></li>
    <li>Upkeep per turn: <vc:resources model="Model.UpkeepPerTurn" /></li>
    <li>Recruits per day: @Model.RecruitsPerDay.ToString(StringFormat.Integer)</li>

    @if (Model.HasUpkeepRunOut) {
        <li class="text-danger">You aren't able to afford the upkeep costs; your workers have stopped working and your mercenaries have left your empire</li>
    }
    else if (Model.WillUpkeepRunOut) {
        <li class="text-danger">You will run out of the food and gold required for upkeep in the next 8 hours; if you run out, your workers will stop working and your mercenaries will leave your empire</li>
    }
</ul>

<housing-totals />

<form method="post" data-success-message-train="Your peasants were trained." data-success-message-untrain="Your workers were untrained.">
    <div asp-validation-summary="ModelOnly" class="site-validation-summary text-danger"></div>

    <input type="hidden" asp-for="Command" />
    <input type="hidden" asp-for="CurrentGoldPerTurn" />
    <input type="hidden" asp-for="CurrentGoldPerWorkerPerTurn" />
    <input type="hidden" asp-for="CurrentPeasants" />
    <input type="hidden" asp-for="WorkerCost.Gold" />
    <input type="hidden" asp-for="WorkerCost.Food" />
    <input type="hidden" asp-for="WorkerCost.Wood" />
    <input type="hidden" asp-for="WorkerCost.Stone" />
    <input type="hidden" asp-for="WorkerCost.Ore" />
    <input type="hidden" asp-for="UpkeepPerTurn.Gold" />
    <input type="hidden" asp-for="UpkeepPerTurn.Food" />
    <input type="hidden" asp-for="UpkeepPerTurn.Wood" />
    <input type="hidden" asp-for="UpkeepPerTurn.Stone" />
    <input type="hidden" asp-for="UpkeepPerTurn.Ore" />
    <input type="hidden" asp-for="RecruitsPerDay" />
    <input type="hidden" asp-for="WillUpkeepRunOut" />
    <input type="hidden" asp-for="HasUpkeepRunOut" />

    <div class="row">
        @for (var i = 0; i < Model.Workers.Count; i++) {
            <input type="hidden" asp-for="Workers[i].Type" />
            <input type="hidden" asp-for="Workers[i].IsProducer" />
            <input type="hidden" asp-for="Workers[i].Name" />
            <input type="hidden" asp-for="Workers[i].Cost.Gold" />
            <input type="hidden" asp-for="Workers[i].Cost.Food" />
            <input type="hidden" asp-for="Workers[i].Cost.Wood" />
            <input type="hidden" asp-for="Workers[i].Cost.Stone" />
            <input type="hidden" asp-for="Workers[i].Cost.Ore" />
            <input type="hidden" asp-for="Workers[i].CurrentProductionPerWorkerPerTurn" />
            <input type="hidden" asp-for="Workers[i].CurrentProductionPerTurn" />
            <input type="hidden" asp-for="Workers[i].CurrentWorkers" />

            <div class="col-12 col-md-6 col-xl-3">
                <h4 class="mt-3">@Model.Workers[i].Name</h4>

                @if (!Model.Workers[i].IsProducer) {
                    <ul class="text-muted">
                        <li>Training cost: <vc:resources model="Model.Workers[i].Cost" /></li>
                    </ul>
                }

                <div class="mb-3">
                    <label>Workers</label>
                    <div class="form-control">@Model.Workers[i].CurrentWorkers.ToString(StringFormat.Integer)</div>
                </div>

                <div class="mb-3">
                    @if (Model.Workers[i].IsProducer) {
                        <label>Production per worker</label> }
                    else {
                        <label>Capacity per worker</label>
                    }
                    <div class="form-control">
                        @Model.Workers[i].CurrentProductionPerWorkerPerTurn.ToString(StringFormat.Integer)
                        <icon type="@iconTypes[Model.Workers[i].Type]" />
                    </div>
                </div>

                <div class="mb-3">
                    @if (Model.Workers[i].IsProducer) {
                        <label>Total production</label> }
                    else {
                        <label>Total capacity</label>
                    }
                    <div class="form-control">
                        @Model.Workers[i].CurrentProductionPerTurn.ToString(StringFormat.Integer)
                        <icon type="@iconTypes[Model.Workers[i].Type]" />
                    </div>
                </div>

                <div class="mb-3">
                    <label asp-for="Workers[i].Count"></label>
                    <input type="text" asp-for="Workers[i].Count" class="form-control" />
                    <span asp-validation-for="Workers[i].Count" class="small form-text text-danger"></span>
                </div>
            </div>
        }
    </div>

    <div class="row">
        <div class="col-6 offset-6 col-md-3 offset-md-9"><button type="submit" class="btn btn-primary w-100" value="train">Train</button></div>
    </div>

    <div class="row mt-1">
        <div class="col-6 offset-6 col-md-3 offset-md-9"><button type="submit" class="btn btn-secondary w-100" value="untrain">Untrain</button></div>
    </div>
</form>
