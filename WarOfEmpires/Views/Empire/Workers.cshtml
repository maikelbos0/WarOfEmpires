@model WarOfEmpires.Models.Empires.WorkersModel

@{
    ViewBag.Title = "Workers";

    var iconTypes = new Dictionary<string, IconType> {
        { "Farmers", IconType.Food },
        { "WoodWorkers", IconType.Wood },
        { "StoneMasons", IconType.Stone },
        { "OreMiners", IconType.Ore },
        { "SiegeEngineers", IconType.Siege },
        { "Merchants", IconType.Market }
    };
}

<h2>Workers</h2>

<p>
    Here you can train or untrain your workers to make sure you produce the resources you require.
</p>

<ul class="text-muted">
    <li>Peasants available for training: @Model.CurrentPeasants.ToString(StringFormat.Integer)</li>
    <li>Worker training cost: @Html.DisplayFor(m => m.WorkerCost)</li>
    <li>Gold production per turn: @Model.CurrentGoldPerTurn.ToString(StringFormat.Integer) <icon type="Gold" /></li>
    <li>Upkeep per turn: @Html.DisplayFor(m => m.UpkeepPerTurn)</li>
    <li>Recruits per day: @Model.RecruitsPerDay.ToString(StringFormat.Integer)</li>

    @if (Model.HasUpkeepRunOut) {
        <li class="text-danger">You aren't able to afford the upkeep costs; your workers have stopped working and your mercenaries have left your empire</li>
    }
    else if (Model.WillUpkeepRunOut) {
        <li class="text-danger">You will run out of the food and gold required for upkeep in the next 8 hours; if you run out, your workers will stop working and your mercenaries will leave your empire</li>
    }
</ul>

<housing-totals />

@using (Html.BeginForm(null, null, FormMethod.Post, new {
    data_success_message_train = "Your peasants were trained.",
    data_success_message_untrain = "Your workers were untrained."
})) {
    @Html.ValidationSummary(true, null, new { @class = "site-validation-summary text-danger" })

    @Html.HiddenFor(m => m.Command)
    @Html.HiddenFor(m => m.CurrentGoldPerTurn)
    @Html.HiddenFor(m => m.CurrentGoldPerWorkerPerTurn)
    @Html.HiddenFor(m => m.CurrentPeasants)
    @Html.HiddenFor(m => m.WorkerCost)
    @Html.HiddenFor(m => m.UpkeepPerTurn)
    @Html.HiddenFor(m => m.RecruitsPerDay)
    @Html.HiddenFor(m => m.WillUpkeepRunOut)
    @Html.HiddenFor(m => m.HasUpkeepRunOut)

    <div class="row">
        @for (var i = 0; i < Model.Workers.Count; i++) {
            @Html.HiddenFor(m => m.Workers[i].Type)
            @Html.HiddenFor(m => m.Workers[i].IsProducer)
            @Html.HiddenFor(m => m.Workers[i].Name)
            @Html.HiddenFor(m => m.Workers[i].Cost)
            @Html.HiddenFor(m => m.Workers[i].CurrentProductionPerWorkerPerTurn)
            @Html.HiddenFor(m => m.Workers[i].CurrentProductionPerTurn)
            @Html.HiddenFor(m => m.Workers[i].CurrentWorkers)

            <div class="col-12 col-md-6 col-xl-3">
                <h4 class="mt-3">@Model.Workers[i].Name</h4>

                @if (!Model.Workers[i].IsProducer) {
                    <ul class="text-muted">
                        <li>Training cost: @Html.DisplayFor(m => m.Workers[i].Cost)</li>
                    </ul>
                }

                <div class="mb-3">
                    <label>Workers</label>
                    <div class="form-control" readonly="readonly">@Model.Workers[i].CurrentWorkers.ToString(StringFormat.Integer)</div>
                </div>

                <div class="mb-3">
                    @if (Model.Workers[i].IsProducer) {
                        <label>Production per worker</label> }
                    else {
                        <label>Capacity per worker</label>
                    }
                    <div class="form-control" readonly="readonly">
                        @Model.Workers[i].CurrentProductionPerWorkerPerTurn.ToString(StringFormat.Integer)
                        <icon type="@iconTypes[Model.Workers[i].Type]" />
                    </div>
                </div>

                <div class="mb-3">
                    @if (Model.Workers[i].IsProducer) {
                        <label>Total production</label> }
                    else {
                        <label>Total capacity</label>
                    }
                    <div class="form-control" readonly="readonly">
                        @Model.Workers[i].CurrentProductionPerTurn.ToString(StringFormat.Integer)
                        <icon type="@iconTypes[Model.Workers[i].Type]" />
                    </div>
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.Workers[i].Count)
                    @Html.TextBoxFor(m => m.Workers[i].Count, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Workers[i].Count, null, new { @class = "small form-text text-danger" })
                </div>
            </div>
        }
    </div>

    <div class="row">
        <div class="col-6 offset-6 col-md-3 offset-md-9"><button type="submit" class="btn btn-primary w-100" value="train">Train</button></div>
    </div>

    <div class="row mt-1">
        <div class="col-6 offset-6 col-md-3 offset-md-9"><button type="submit" class="btn btn-secondary w-100" value="untrain">Untrain</button></div>
    </div>
}
