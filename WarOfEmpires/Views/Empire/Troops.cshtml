@model WarOfEmpires.Models.Empires.TroopsModel

@{
    ViewBag.Title = "Troops";
}

<h2>Troops</h2>

<p>
    Here you can train or untrain your troops.
</p>

<ul class="text-muted">
    <li>Peasants available for training: @Model.CurrentPeasants.ToString(StringFormat.Integer)</li>
    <li>Mercenary training cost: @Html.DisplayFor(m => m.MercenaryTrainingCost)</li>

    @if (Model.HasUpkeepRunOut) {
        <li class="text-danger">You aren't able to afford the upkeep costs; your workers have stopped working and your mercenaries have left your empire</li>
    }
    else if (Model.WillUpkeepRunOut) {
        <li class="text-danger">You will run out of the food and gold required for upkeep in the next 8 hours; if you run out, your workers will stop working and your mercenaries will leave your empire</li>
    }

    @if (Model.HasSoldierShortage) {
        <li class="text-danger">You don't have enough soldiers to protect your empire; train more of your peasants to be soldiers to stop scaring off new recruits</li>
    }
</ul>

<div id="empire-housing-totals" class="partial-content">
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new {
    data_success_message_train = "Your troops were trained.",
    data_success_message_untrain = "Your troops were untrained.",
    data_success_message_heal = "Your troops were healed.",
})) {
    @Html.ValidationSummary(true, null, new { @class = "site-validation-summary text-danger" })

    @Html.HiddenFor(m => m.Command)
    @Html.HiddenFor(m => m.CurrentPeasants)
    @Html.HiddenFor(m => m.MercenaryTrainingCost)
    @Html.HiddenFor(m => m.CurrentStamina)

    <div class="row">
        <div class="col-12 col-md-6 col-xl-3">
            <h4 class="mt-3">Stamina</h4>

            <div class="form-group">
                <label>Current stamina</label>
                <div class="form-control" readonly="readonly">@Model.CurrentStamina.ToString(StringFormat.Integer)</div>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.StaminaToHeal)
                @Html.TextBoxFor(m => m.StaminaToHeal, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.StaminaToHeal, null, new { @class = "small form-text text-danger" })
            </div>

            <div class="row">
                <div class="col-6 offset-6 col-xl-12 offset-xl-0"><button type="submit" class="btn btn-primary form-control" value="heal">Heal troops</button></div>
            </div>
        </div>

        @for (var i = 0; i < Model.Troops.Count; i++) {
            @Html.HiddenFor(m => m.Troops[i].Type)
            @Html.HiddenFor(m => m.Troops[i].Name)
            @Html.HiddenFor(m => m.Troops[i].Cost)
            @Html.HiddenFor(m => m.Troops[i].CurrentSoldiers)
            @Html.HiddenFor(m => m.Troops[i].CurrentMercenaries)

            <div class="col-12 col-md-6 col-xl-3">
                <h4 class="mt-3">@Model.Troops[i].Name</h4>

                <ul class="text-muted">
                    <li>Training cost: @Html.DisplayFor(m => m.Troops[i].Cost)</li>
                </ul>

                <div class="form-group">
                    <label>Current soldiers</label>
                    <div class="form-control" readonly="readonly">@Model.Troops[i].CurrentSoldiers.ToString(StringFormat.Integer)</div>
                </div>

                <div class="form-group">
                    <label>Current mercenaries</label>
                    <div class="form-control" readonly="readonly">@Model.Troops[i].CurrentMercenaries.ToString(StringFormat.Integer)</div>
                </div>

                <div class="form-group">
                    @Html.Label("Soldiers")
                    @Html.TextBoxFor(m => m.Troops[i].Soldiers, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Troops[i].Soldiers, null, new { @class = "small form-text text-danger" })
                </div>

                <div class="form-group">
                    @Html.Label("Mercenaries")
                    @Html.TextBoxFor(m => m.Troops[i].Mercenaries, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Troops[i].Mercenaries, null, new { @class = "small form-text text-danger" })
                </div>
            </div>
        }
    </div>

    <div class="row">
        <div class="col-6 offset-6 col-md-3 offset-md-9"><button type="submit" class="btn btn-primary form-control" value="train">Train troops</button></div>
    </div>

    <div class="row mt-1">
        <div class="col-6 offset-6 col-md-3 offset-md-9"><button type="submit" class="btn btn-secondary form-control" value="untrain">Untrain troops</button></div>
    </div>
}