trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  displayName: Install dotnet-ef
  inputs:
    command: custom
    custom: 'tool'
    arguments: 'install dotnet-ef --global'

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build $(buildConfiguration)'
  inputs:
    command: build
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Create migration script'
  inputs:
    command: custom
    custom: 'ef'
    arguments: migrations script --output $(Build.SourcesDirectory)/migrations.sql --idempotent --startup-project $(Build.SourcesDirectory)/WarOfEmpires/WarOfEmpires.csproj --project $(Build.SourcesDirectory)/WarOfEmpires.Database/WarOfEmpires.Database.csproj

- task: DotNetCoreCLI@2
  displayName: 'Publish'
  inputs:
    command: publish
    publishWebProjects: True
    arguments: --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)
    zipAfterPublish: True

- task: PublishBuildArtifacts@1
  displayName: 'Publish migration script'
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/migrations.sql
    ArtifactName: database

- task: PublishBuildArtifacts@1
  displayName: 'Publish static files'
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/WarOfEmpires/wwwroot/
    ArtifactName: static

- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts'